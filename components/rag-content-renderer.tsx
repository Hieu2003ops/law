"use client"
import { cn } from "@/lib/utils"
import { useTheme } from "next-themes"
import type { JSX } from "react"

interface RagContentRendererProps {
  content: string
}

export function RagContentRenderer({ content }: RagContentRendererProps) {
  const { theme } = useTheme()
  const isDark = theme === "dark"

  // X·ª≠ l√Ω n·ªôi dung RAG
  const processRagContent = () => {
    // T√°ch n·ªôi dung th√†nh c√°c d√≤ng ƒë·ªÉ x·ª≠ l√Ω
    const lines = content
      .split("\n")
      .map((line) => line.trim())
      .filter(Boolean)

    // M·∫£ng ch·ª©a c√°c ph·∫ßn t·ª≠ HTML ƒë√£ x·ª≠ l√Ω
    const processedElements: JSX.Element[] = []

    // Bi·∫øn ƒë·ªÉ theo d√µi ph·∫ßn ƒëang x·ª≠ l√Ω
    let currentSection = ""
    let sectionContent: string[] = []

    // X·ª≠ l√Ω t·ª´ng d√≤ng
    lines.forEach((line, index) => {
      // X·ª≠ l√Ω ti√™u ƒë·ªÅ ch√≠nh
      if (line.includes("PH·∫¶N I:") || line.includes("üéØ") || line.startsWith("===")) {
        if (line.includes("PH·∫¶N I:") || line.includes("üéØ")) {
          processedElements.push(
            <div
              key={`header-${index}`}
              className={`text-xl font-bold my-4 ${isDark ? "text-yellow-400" : "text-red-700"} flex items-center`}
            >
              {line.includes("üéØ") && <span className="mr-2">üéØ</span>}
              PH·∫¶N I: Ph√¢n t√≠ch t·ª´ vƒÉn b·∫£n ph√°p lu·∫≠t (RAG pipeline):
            </div>,
          )
        } else {
          processedElements.push(
            <div
              key={`divider-${index}`}
              className={`my-4 border-b ${isDark ? "border-gray-600" : "border-gray-300"}`}
            ></div>,
          )
        }
        return
      }

      // X·ª≠ l√Ω l·ªùi ch√†o
      if (line.startsWith("Ch√†o") || line.includes("T√¥i l√† tr·ª£ l√Ω")) {
        processedElements.push(
          <p key={`intro-${index}`} className={`my-2 ${isDark ? "text-gray-200" : "text-gray-800"}`}>
            {line}
          </p>,
        )
        return
      }

      // X·ª≠ l√Ω c√¢u h·ªèi
      if (line.includes("Sau ƒë√¢y m√¨nh s·∫Ω tr·∫£ l·ªùi c√¢u h·ªèi:") || line.includes("?")) {
        processedElements.push(
          <p key={`question-${index}`} className={`my-3 font-medium ${isDark ? "text-gray-100" : "text-gray-900"}`}>
            {line}
          </p>,
        )
        return
      }

      // X·ª≠ l√Ω c√°c ƒëi·ªÅu lu·∫≠t
      if (line.match(/^[a-z]\)/) || line.startsWith("*") || line.startsWith("-") || line.match(/^\d+\./)) {
        // ƒê·ªãnh d·∫°ng ƒëi·ªÅu lu·∫≠t
        let formattedLine = line

        // X·ª≠ l√Ω c√°c ƒëi·ªÅu lu·∫≠t d·∫°ng a), b)
        if (line.match(/^[a-z]\)/)) {
          formattedLine = line.replace(/^([a-z]\))/, (match) => {
            return `<span class="font-medium ${isDark ? "text-yellow-300" : "text-red-600"}">${match}</span>`
          })

          processedElements.push(
            <div
              key={`law-item-${index}`}
              className="ml-6 my-2"
              dangerouslySetInnerHTML={{ __html: formattedLine }}
            ></div>,
          )
          return
        }

        // X·ª≠ l√Ω c√°c m·ª•c c√≥ d·∫•u * ho·∫∑c -
        if (line.startsWith("*") || line.startsWith("-")) {
          formattedLine = line.replace(/^[*-]\s*/, "")

          // Ki·ªÉm tra n·∫øu l√† ti√™u ƒë·ªÅ ph·∫ßn
          if (formattedLine.includes("**")) {
            const cleanTitle = formattedLine.replace(/\*\*/g, "").trim()

            processedElements.push(
              <div
                key={`section-title-${index}`}
                className={`font-bold mt-4 mb-2 ${isDark ? "text-yellow-400 border-yellow-500" : "text-red-700 border-red-600"} border-l-4 pl-3 py-1`}
              >
                {cleanTitle}
              </div>,
            )

            // C·∫≠p nh·∫≠t ph·∫ßn hi·ªán t·∫°i
            currentSection = cleanTitle
            sectionContent = []
            return
          }

          processedElements.push(
            <div key={`bullet-${index}`} className="ml-4 my-2 flex">
              <span className={`mr-2 ${isDark ? "text-yellow-400" : "text-red-600"}`}>‚Ä¢</span>
              <span>{formattedLine}</span>
            </div>,
          )
          return
        }

        // X·ª≠ l√Ω c√°c m·ª•c c√≥ s·ªë
        if (line.match(/^\d+\./)) {
          formattedLine = line.replace(/^(\d+\.)/, (match) => {
            return `<span class="font-medium ${isDark ? "text-yellow-300" : "text-red-600"}">${match}</span>`
          })

          processedElements.push(
            <div
              key={`numbered-${index}`}
              className="ml-4 my-2"
              dangerouslySetInnerHTML={{ __html: formattedLine }}
            ></div>,
          )
          return
        }
      }

      // X·ª≠ l√Ω tr√≠ch d·∫´n
      if (line.startsWith('"') || line.includes("Tr√≠ch d·∫´n")) {
        if (line.includes("Tr√≠ch d·∫´n")) {
          processedElements.push(
            <div
              key={`quote-title-${index}`}
              className={`font-semibold mt-4 mb-2 ${isDark ? "text-yellow-400" : "text-red-700"}`}
            >
              Tr√≠ch d·∫´n:
            </div>,
          )
          return
        }

        processedElements.push(
          <blockquote
            key={`quote-${index}`}
            className={`my-2 pl-4 border-l-4 ${isDark ? "border-yellow-500 text-gray-300" : "border-red-500 text-gray-700"} italic`}
          >
            {line}
          </blockquote>,
        )
        return
      }

      // X·ª≠ l√Ω c√°c ph·∫ßn gi·∫£i th√≠ch
      if (line.includes("Gi·∫£i th√≠ch") || currentSection.includes("Gi·∫£i th√≠ch")) {
        if (line.includes("Gi·∫£i th√≠ch") && !currentSection.includes("Gi·∫£i th√≠ch")) {
          currentSection = "Gi·∫£i th√≠ch"
          processedElements.push(
            <div
              key={`explanation-title-${index}`}
              className={`font-semibold mt-4 mb-2 ${isDark ? "text-yellow-400" : "text-red-700"}`}
            >
              Gi·∫£i th√≠ch:
            </div>,
          )
          return
        }

        if (currentSection === "Gi·∫£i th√≠ch" && line.trim() !== "") {
          processedElements.push(
            <p key={`explanation-${index}`} className={`my-2 ml-4 ${isDark ? "text-gray-200" : "text-gray-800"}`}>
              {line}
            </p>,
          )
          return
        }
      }

      // X·ª≠ l√Ω c√°c ph·∫ßn v√≠ d·ª•
      if (line.includes("V√≠ d·ª•") || currentSection.includes("V√≠ d·ª•")) {
        if (line.includes("V√≠ d·ª•") && !currentSection.includes("V√≠ d·ª•")) {
          currentSection = "V√≠ d·ª•"
          processedElements.push(
            <div
              key={`example-title-${index}`}
              className={`font-semibold mt-4 mb-2 ${isDark ? "text-yellow-400" : "text-red-700"}`}
            >
              V√≠ d·ª•:
            </div>,
          )
          return
        }

        if (currentSection === "V√≠ d·ª•" && line.trim() !== "") {
          processedElements.push(
            <p key={`example-${index}`} className={`my-2 ml-4 ${isDark ? "text-gray-200" : "text-gray-800"}`}>
              {line}
            </p>,
          )
          return
        }
      }

      // X·ª≠ l√Ω k·∫øt lu·∫≠n
      if (line.includes("K·∫øt lu·∫≠n") || line.includes("T·ªïng h·ª£p")) {
        processedElements.push(
          <div
            key={`conclusion-title-${index}`}
            className={`font-semibold mt-4 mb-2 ${isDark ? "text-yellow-400" : "text-red-700"}`}
          >
            K·∫øt lu·∫≠n:
          </div>,
        )
        return
      }

      // X·ª≠ l√Ω c√°c d√≤ng c√≤n l·∫°i
      if (line.trim() !== "") {
        processedElements.push(
          <p key={`text-${index}`} className={`my-2 ${isDark ? "text-gray-200" : "text-gray-800"}`}>
            {line}
          </p>,
        )
      }
    })

    return processedElements
  }

  return <div className={`prose max-w-none ${isDark ? "prose-invert" : ""}`}>{processRagContent()}</div>
}
